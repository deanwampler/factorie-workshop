
# usage: 
#   spam-classifier -h | --help 
#   spam-classifier (train | classify) directory [factorie_options]
# where:
#   -h | --help       Print help on the available options.
#   train directory      Train the classifier using emails in "directory"
#   classify directory   Classify emails with the trained classifier.
#   factorie_options     Other FACTORIE options, if any.
# The files can be 

dir=$(dirname $0)
root=$(dirname $dir)
data=$root/data
mkdir -p $data/out/classifier

which_one=$1
case $which_one in
  
  -h | --help)
    args=("--help")
    ;;

  train)
    args=(
      "--write-vocabulary" "$data/out/classifier/vocab" 
      "--write-classifier" "$data/out/classifier/enron_email"
      "--training-portion" "0.8"
      "--validation-portion" "0.1"
      "--trainer" "new cc.factorie.app.classify.backend.SVMMulticlassTrainer" # "new NaiveBayes" #"new NaiveBayesClassifierTrainer"
      "--print-infogain" "true"
      "--read-text-encoding" "ISO-8859-1"
      "--read-text-dirs" "$data/enron_spam_ham/spam $data/enron_spam_ham/ham")
    ;;
  
  classify)
    args=(
      "--read-vocabulary" "$data/out/classifier/vocab" 
      "--read-classifier" "$data/out/classifier/enron_email"
      "--read-text-encoding" "ISO-8859-1"
      "--write-classifications" "$data/out/classifier/results.txt"
      "--read-text-dirs" "$data/unclassified/spam $data/unclassified/ham")
    ;;
  
  *)
    echo "Unrecognized command: $1. Must be 'train' or 'classify'."
    exit 1
    ;;
esac
shift

$root/bin/fac classify "${args[@]}" "$@"
